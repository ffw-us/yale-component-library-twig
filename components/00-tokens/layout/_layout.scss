@use '~@yalesites-org/tokens/build/scss/tokens';
@use '../../00-tokens/functions/map';

:root {
  --size-spacing-site-gutter: var(--size-spacing-5);

  @media (min-width: tokens.$break-m) {
    --size-spacing-site-gutter: var(--size-spacing-6);
  }

  @media (min-width: tokens.$break-l) {
    --size-spacing-site-gutter: var(--size-spacing-7);
  }
}

$layout-widths: map.deep-get(tokens.$tokens, size, component-layout, width);

[data-component-width] {
  padding-inline: var(--size-spacing-site-gutter);
}

[class*='__inner'] {
  max-width: 100%;
  margin-inline: auto;
  width: var(--component-width);

  @each $width, $value in $layout-widths {
    [data-component-width='#{$width}'] & {
      --component-width: var(--size-component-layout-width-#{$width});
    }
  }
}

// The spacing-page-inner mixin should be applied to components that are
// "content-like." They generally accompany other components within a "section."
@mixin spacing-page-inner {
  &:not(.no-page-spacing) {
    margin-bottom: var(--spacing-page-inner);
  }
}

// The spacing-page-section mixin should be applied to components that are
// intended to "stand out" from the components around them. A callout, or a card
// grid, for example, may relate to the text around them, but they're not "part"
// of the text.
@mixin spacing-page-section {
  margin-bottom: var(--spacing-page-section);
}
