@use '../../00-tokens/index' as base;

$button-radii: (
  'soft': var(--button-radius-soft),
  'pill': 100vmax,
);
$button-outline-weights: (
  '1': var(--border-thickness-1),
  '2': var(--border-thickness-2),
  '4': var(--border-thickness-4),
);

// The button-reset mixin is used to remove browser default styles for button
// elements that shouldn't look like a traditional "button".
@mixin button-reset {
  border: 0;
  background: transparent;
  padding: 0;
  color: inherit;
}

@mixin button {
  --color-button-outline: var(--color-link);

  // prettier-ignore
  border: var(--border-thickness-button, var(--border-thickness-2)) solid var(--color-button-border);
  border-radius: var(--border-radius-button, var(--radius-0));
  background-color: var(--color-button-bg);
  color: var(--color-button-text);
  font-weight: var(--font-weights-mallory-500);
  padding: var(--size-spacing-4) var(--size-spacing-7);
  text-decoration: none;

  &:hover {
    background-color: var(--color-button-bg-hover);
    color: var(--color-button-text-hover);
  }

  &:focus {
    outline: var(--size-thickness-2) solid var(--color-button-outline);
    outline-offset: var(--size-thickness-2);
  }

  // Radius options
  @each $radius, $value in $button-radii {
    &[data-button-radius='#{$radius}'] {
      --border-radius-button: #{$value};
    }
  }

  // Outline weights options
  @each $weight, $value in $button-outline-weights {
    &[data-button-outline-weight='#{$weight}'] {
      --border-thickness-button: #{$value};
    }
  }

  // Styles
  &[data-button-style='filled'] {
    --color-button-bg: var(--color-button-primary);
    --color-button-bg-hover: transparent;
    --color-button-border: var(--color-button-primary);
    --color-button-text: var(--color-button-secondary);
    --color-button-text-hover: var(--color-button-primary);
  }

  &[data-button-style='outline'] {
    --color-button-bg: transparent;
    --color-button-bg-hover: var(--color-button-primary);
    --color-button-border: var(--color-button-primary);
    --color-button-text: var(--color-button-primary);
    --color-button-text-hover: var(--color-button-secondary);
  }

  // Color schemes
  [data-component-theme='gray-800'] &,
  [data-component-theme='gray-700'] &,
  [data-component-theme='blue-yale'] & {
    // prettier-ignore
    --color-button-primary: var(--color-theme-button-secondary, var(--color-basics-white));

    // prettier-ignore
    --color-button-secondary: var(--color-theme-button-primary, var(--color-blue-yale));
  }

  // Hover styles
  &[data-button-hover-style='fade'] {
    @include base.animate('color, background-color');
  }

  &[data-button-hover-style='rise'] {
    @include base.animate('transform, box-shadow');

    &:hover {
      transform: translateY(-0.25em);
      color: var(--color-button-text);
      background-color: var(--color-button-bg);
      box-shadow: var(--drop-shadow-level-1);
    }
  }

  &[data-button-hover-style='wipe'] {
    @include base.animate($duration: 400ms);

    &:hover {
      &[data-button-style='outline'] {
        box-shadow: inset 6.5em 0 0 0 var(--color-button-bg-hover);
      }
    }

    &[data-button-style='filled'] {
      box-shadow: inset -6.5em 0 0 0 var(--color-button-bg);

      &:hover {
        box-shadow: none;
      }
    }
  }

  &:active {
    --color-button-bg-active: var(--color-gray-700);
    --color-button-border-active: var(--color-gray-700);
    --color-button-text-active: var(--color-basics-white);
    --button-box-shadow-active: none;

    // Don't ever use !important!!!
    // With that said, these are !important because the active styles below
    // should take precedence over any hover styles regardless of specificity.
    // We experimented with adding extra specificity to this selector to make it
    // "naturally" override the nested data attributes above... but that seemed
    // more hacky than adding a few !importants. In this case we want the active
    // state to take precedence over the hover state in any/all situations.
    background-color: var(--color-button-bg-active) !important;
    border-color: var(--color-button-border-active);
    color: var(--color-button-text-active) !important;
    box-shadow: var(--button-box-shadow-active) !important;
  }
}

.button {
  @include button;
}

// Temporary place for this
.button-group {
  display: flex;
  gap: var(--size-spacing-7);
  margin-bottom: var(--size-spacing-7);
}
