@use 'sass:selector';
@use '~@yalesites-org/tokens/build/scss/tokens' as sass-tokens;
@use '../../../00-tokens/functions/map';
@use '../../../00-tokens/tokens';

$component-cta-themes: map.deep-get(tokens.$tokens, 'component-themes');
$component-basic-themes: map.deep-get(tokens.$tokens, 'basic-themes');
$global-cta-themes: map.deep-get(tokens.$tokens, 'global-themes');
$cta-radii: (
  'soft': var(--cta-radius-soft),
  'pill': 100vmax,
);
$cta-outline-weights: (
  '1': var(--border-thickness-1),
  '2': var(--border-thickness-2),
  '4': var(--border-thickness-4),
);

@mixin cta {
  // prettier-ignore
  border: var(--border-thickness-cta, var(--border-thickness-2)) solid var(--color-cta-border);
  border-radius: var(--border-radius-cta, var(--radius-0));
  background-color: var(--color-cta-bg);
  color: var(--color-cta-text);
  font-weight: var(--font-weights-mallory-medium);
  padding: var(--size-spacing-3) var(--size-spacing-6);
  text-decoration: none;
  text-align: center;
  min-height: var(--size-click-target-minimum);

  &:hover {
    background-color: var(--color-cta-bg-hover);
    color: var(--color-cta-text-hover);
  }

  // Radius options
  @each $radius, $value in $cta-radii {
    &[data-cta-radius='#{$radius}'] {
      --border-radius-cta: #{$value};
    }
  }

  // Outline weights options
  @each $weight, $value in $cta-outline-weights {
    &[data-cta-outline-weight='#{$weight}'] {
      --border-thickness-cta: #{$value};
    }
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $component-cta-themes {
    &[data-cta-theme='#{$theme}'] {
      --color-slot-one: var(--component-themes-#{$theme}-slot-one);
      --color-slot-two: var(--component-themes-#{$theme}-slot-two);
      --color-slot-three: var(--component-themes-#{$theme}-slot-three);
      --color-slot-four: var(--component-themes-#{$theme}-slot-four);
      --color-slot-five: var(--component-themes-#{$theme}-slot-five);
      --color-action: var(--color-cta-action);
      --color-action-secondary: var(--color-cta-action-secondary);
      --color-cta-action-secondary: var(--color-basic-white);
      --color-cta-action: var(--color-slot-one);
    }
  }

  @each $theme, $value in $component-basic-themes {
    [data-basic-theme='#{$theme}'] & {
      --color-action: var(--color-text);
      --color-action-secondary: var(--color-background);
    }
  }

  // Styles
  &[data-cta-style='filled'] {
    --color-cta-bg: var(--color-action);
    --color-cta-bg-hover: transparent;
    --color-cta-border: var(--color-action);
    --color-cta-text: var(--color-action-secondary);
    --color-cta-text-hover: var(--color-action);
  }

  &[data-cta-style='outline'] {
    --color-cta-bg: transparent;
    --color-cta-bg-hover: var(--color-action);
    --color-cta-border: var(--color-action);
    --color-cta-text: var(--color-action);
    --color-cta-text-hover: var(--color-action-secondary);
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-cta-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-cta-theme='one'] {
    &[data-cta-style='filled'] {
      --color-cta-action-secondary: var(--color-basic-white);
      --color-cta-action: var(--color-slot-one);
      --color-cta-bg: var(--color-slot-one);
      --color-cta-bg-hover: transparent;
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-cta-action-secondary);
      --color-cta-text-hover: var(--color-action);
    }

    &[data-cta-style='outline'] {
      --color-cta-action-secondary: var(--color-basic-white);
      --color-cta-action: var(--color-slot-one);
      --color-cta-bg: transparent;
      --color-cta-bg-hover: var(--color-action);
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-action);
      --color-cta-text-hover: var(--color-cta-action-secondary);
    }
  }

  &[data-cta-theme='two'] {
    &[data-cta-style='filled'] {
      --color-cta-action: var(--color-slot-two);
      --color-cta-bg: var(--color-slot-two);
      --color-cta-bg-hover: transparent;
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-basic-white);
      --color-cta-text-hover: var(--color-action);
    }

    &[data-cta-style='outline'] {
      --color-cta-action-secondary: var(--color-basic-white);
      --color-cta-action: var(--color-slot-two);
      --color-cta-bg: transparent;
      --color-cta-bg-hover: var(--color-action);
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-action);
      --color-cta-text-hover: var(--color-cta-action-secondary);
    }
  }

  &[data-cta-theme='three'] {
    &[data-cta-style='filled'] {
      --color-cta-action: var(--color-slot-five);
      --color-cta-bg: var(--color-slot-five);
      --color-cta-bg-hover: transparent;
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-basic-white);
      --color-cta-text-hover: var(--color-action);
    }

    &[data-cta-style='outline'] {
      --color-cta-action-secondary: var(--color-basic-white);
      --color-action: var(--color-slot-five);
      --color-cta-bg: transparent;
      --color-cta-bg-hover: var(--color-action);
      --color-cta-border: var(--color-action);
      --color-cta-text: var(--color-action);
      --color-cta-text-hover: var(--color-cta-action-secondary);
    }
  }

  // Hover styles
  &[data-cta-hover-style='fade'] {
    @include tokens.animate('color, background-color');
  }

  &[data-cta-hover-style='rise'] {
    @include tokens.animate($property: 'transform');

    transform: translateY(0);

    &:hover {
      transform: translateY(-0.25em);
      color: var(--color-cta-text);
      background-color: var(--color-cta-bg);
      box-shadow: var(--drop-shadow-level-1);
    }
  }

  &[data-cta-hover-style='wipe'] {
    @include tokens.animate($duration: 400ms);

    &:hover {
      &[data-cta-style='outline'] {
        box-shadow: inset 6.5em 0 0 0 var(--color-cta-bg-hover);
      }
    }

    &[data-cta-style='filled'] {
      box-shadow: inset -6.5em 0 0 0 var(--color-cta-bg);

      &:hover {
        box-shadow: none;
      }
    }
  }

  &:active {
    --color-cta-bg-active: var(--color-gray-700);
    --color-cta-border-active: var(--color-gray-700);
    --color-cta-text-active: var(--color-basic-white);
    --cta-box-shadow-active: none;

    // Don't ever use !important!!!
    // With that said, these are !important because the active styles below
    // should take precedence over any hover styles regardless of specificity.
    // We experimented with adding extra specificity to this selector to make it
    // "naturally" override the nested data attributes above... but that seemed
    // more hacky than adding a few !importants. In this case we want the active
    // state to take precedence over the hover state in any/all situations.
    background-color: var(--color-cta-bg-active) !important;
    border-color: var(--color-cta-border-active);
    color: var(--color-cta-text-active) !important;
    box-shadow: var(--cta-box-shadow-active) !important;
  }

  // @at-root docs: https://sass-lang.com/documentation/at-rules/at-root
  @at-root #{selector.unify(&, a)} {
    &:hover,
    &:focus-visible {
      text-decoration: underline;
    }
  }
}

.cta {
  @include cta;

  .form--inline & {
    height: 100%;
  }
}

// @TODO: Temporary place for this
.cta-group {
  display: flex;
  gap: var(--size-spacing-7);
  margin-bottom: var(--size-spacing-7);
}
