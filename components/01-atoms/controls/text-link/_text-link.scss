@use '../../../00-tokens/tokens' as base;

:root {
  // @LINK: https://yaleits.atlassian.net/browse/YALB-350
  // @TODO: These color scheme custom property settings seem like they shouldn't
  // need to live here. At some point it'd be nice to get rid of them.
  // Color schemes
  [data-component-theme='gray-800'],
  [data-component-theme='blue-yale'] {
    --link-color-base: var(--color-basic-white);
    --link-color-hover: var(--color-blue-light);
  }

  [data-component-theme='gray-700'] {
    --link-color-base: var(--color-basic-white);
    --link-color-hover: var(--color-gray-300);
  }

  [data-component-theme='gray-200'] {
    --link-color-base: var(--color-blue-yale);
    --link-color-hover: var(--color-text);
  }
}

// Mixin for generic links.
// Style options are "underline" or "no-underline".
// The style name indicates the initial appearance.
@mixin link($style: underline, $family-weight: 'mallory-medium') {
  @include base.animate('color');

  position: relative;
  color: var(--link-color-base);
  text-decoration: none;
  font-weight: var(--font-weights-#{$family-weight});

  // Add the decorative bar under links
  &::after {
    @include base.animate('transform');

    content: '';
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    height: 2px;
    background-color: currentcolor;
    transform-origin: left center;
    transform: var(--link-styles-#{$style}-transform);
  }

  &:hover {
    color: var(--link-color-hover);
  }

  // Animate the decorative bar when the link is hovered
  &:hover::after {
    transform: var(--link-styles-#{$style}-transform-hover);
  }

  &:focus::after {
    transform: scale(0, 1);
  }
}

// This mixin is used to style linked headings in components that should be
// "fully clickable". e.g. When an entire card is clickable, this applies the
// appropriate styles to the heading inside the card.
// NOTE: Apply the mixin to the parent item. e.g.: `.card` and it will affect
// the `.card__heading-link` element inside.
@mixin component-link {
  // This sets `$selector` to the relative class, so that later, we can style
  // The `__heading-link` that applies to the appropriate component.
  $selector: &;

  #{$selector}__heading-link {
    @include base.animate('color');

    position: relative;
    color: currentcolor;
    text-decoration: none;
    font-weight: var(--font-weights-yalenew-bold);

    // Add the decorative bar under links
    &::after {
      @include base.animate('transform');

      content: '';
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      height: 2px;
      background-color: currentcolor;
      transform-origin: left center;
      transform: var(--link-styles-no-underline-transform);
    }
  }

  &:hover #{$selector}__heading-link {
    color: var(--link-color-base);
  }

  &:hover #{$selector}__heading-link::after {
    transform: var(--link-styles-no-underline-transform-hover);
  }

  &:focus #{$selector}__heading-link::after {
    transform: scale(0, 1);
  }
}

.text-field a {
  @include link;
}

.link {
  &[data-link-style='underline'] {
    @include link;
  }

  &[data-link-style='no-underline'] {
    @include link(no-underline);
  }
}
