@use '../../../00-tokens/tokens';
@use '../../../01-atoms/atoms';

$modal-speed: var(--animation-speed-slow);

@mixin media-grid-modal-transition {
  @include tokens.animate(opacity, $modal-speed);
}

.media-grid__modal {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;

  // This z-index is crazy high to ensure it shows above admin toolbars.
  z-index: 600;
  background: transparent;

  [data-media-grid-modal-state='inactive'] & {
    @include tokens.animate-hidden($modal-speed);
    @include media-grid-modal-transition;

    opacity: 0;
  }

  // Show the modal and backdrop when active.
  [data-media-grid-modal-state='active'] & {
    @include media-grid-modal-transition;

    opacity: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-color: var(--color-background);
    opacity: 0.9;
  }

  // Position modal content relative, to "place it on top of the backdrop".
  > * {
    position: relative;
  }

  svg {
    max-width: 100%;
    max-height: 100%;
  }
}

.media-grid-modal__item {
  padding-block: var(--size-spacing-site-gutter);
  width: 100%;
  height: 100%;
  overflow: auto;
}

.media-grid-modal__inner {
  display: grid;

  // Stylelint is mis-interpreting the `/` below as a division operator, rather
  // than as a part of the grid-template sizing stuff. So, we need to disable
  // that check for this chunk of code.
  /* stylelint-disable scss/operator-no-newline-before */
  grid-template:
    '. . control-close' var(--size-click-target-minimum)
    'media media media' minmax(auto, 50vh)
    'control-previous pager control-next' var(--size-click-target-minimum)
    'content content content' minmax(var(--size-click-target-minimum), 1fr)
    / var(--size-click-target-minimum) minmax(0, 1fr) var(--size-click-target-minimum);
  /* stylelint-enable scss/operator-no-newline-before */
  gap: var(--spacing-component-gutter-secondary);
  max-height: 100%;

  @media (min-width: tokens.$break-s) {
    grid-template:
      '. media control-close' var(--size-click-target-minimum)
      'control-previous media control-next' minmax(auto, 4fr)
      '. pager .' fit-content(100%)
      '. content .' minmax(var(--size-click-target-minimum), 1fr) / var(
        --size-click-target-minimum
      )
      minmax(0, 1fr)
      var(--size-click-target-minimum);
  }
}

.media-grid-modal__media {
  grid-area: media;
  height: 100%;
  width: 100%;

  img {
    height: 100%;
    width: 100%;
    object-fit: contain;
  }
}

.media-grid-modal__pager {
  grid-area: pager;
  display: flex;
  gap: var(--size-spacing-1);
  justify-content: center;
  overflow: auto;
}

.media-grid-modal__pager-item {
  @include atoms.button-reset;

  display: flex;
  align-items: center;
  justify-content: center;
  min-height: var(--size-click-target-minimum);
  min-width: var(--size-click-target-minimum);

  // Fix to keep the focus indicator visible. Needed because of the
  // `overflow: auto` above, which would otherwise cut off the outline.
  outline-offset: calc(var(--size-thickness-2) * -1);

  &:hover {
    @media (min-width: tokens.$break-s) {
      color: var(--color-link-hover);
    }
  }

  @media (max-width: tokens.$break-s - 0.05) {
    &:not(.media-grid-modal__pager-item--total):not([data-media-grid-modal-item-active='true']) {
      display: none;
    }

    &[data-media-grid-modal-item-active='true'] {
      position: relative;

      &::after {
        content: '/';
        position: absolute;
        right: calc(calc(var(--spacing-component-gutter-secondary) / 4) * -1);
      }
    }
  }

  @media (min-width: tokens.$break-s) {
    &.media-grid-modal__pager-item--total {
      display: none;
    }
  }
}

.media-grid-modal__pager-item-content {
  [aria-current='true'] > & {
    @media (min-width: tokens.$break-s) {
      transform: scale(1.45);
    }
  }
}

.media-grid-modal__content {
  grid-area: content;
  overflow: auto;
  max-height: 100%;

  .text {
    display: flex;
    flex-direction: column;
    gap: var(--size-spacing-3);
  }

  a {
    @include atoms.plain-link;
  }
}

.media-grid-modal__heading {
  @include tokens.body-l;
}

.media-grid-modal__text {
  @include tokens.body-default-condensed;
}

.media-grid-modal__control {
  @include atoms.button-reset;

  height: 100%;
  display: flex;
  align-items: center;

  &:hover {
    color: var(--color-link-hover);
  }

  svg {
    height: var(--size-click-target-minimum);
  }

  &--previous {
    grid-area: control-previous;

    svg {
      transform: rotate(90deg);
    }
  }

  &--next {
    grid-area: control-next;

    svg {
      transform: rotate(-90deg);
    }
  }

  &--close {
    grid-area: control-close;
    border: var(--size-thickness-1) solid;
    padding: var(--size-spacing-2);
  }
}

[data-media-grid-modal-item]:not([data-media-grid-modal-item-active]) {
  @include tokens.animate-hidden($modal-speed);
  @include media-grid-modal-transition;

  opacity: 0;
}

[data-media-grid-modal-item-active] {
  @include media-grid-modal-transition;

  opacity: 1;
}
